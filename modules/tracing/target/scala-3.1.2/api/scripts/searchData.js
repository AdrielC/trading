pages = [{"l":"index.html","n":"tracing","t":"tracing","d":"","k":"static"},
{"l":"trading/trace.html","n":"trading.trace","t":"package trading.trace","d":"trading/trace","k":"package"},
{"l":"trading/trace/Config$.html","n":"Config","t":"object Config","d":"trading/trace/Config$","k":"object"},
{"l":"trading/trace/Config$.html","n":"HoneycombApiKey","t":"type HoneycombApiKey = Type","d":"trading/trace/Config$","k":"type"},
{"l":"trading/trace/Config$.html","n":"load","t":"def load[F[_]](using evidence$1: Async[F]): F[TracingConfig]","d":"trading/trace/Config$","k":"def"},
{"l":"trading/trace/Config$$HoneycombApiKey$.html","n":"HoneycombApiKey","t":"object HoneycombApiKey extends Newtype[String]","d":"trading/trace/Config$$HoneycombApiKey$","k":"object"},
{"l":"trading/trace/Main$.html","n":"Main","t":"object Main extends Simple","d":"trading/trace/Main$","k":"object"},
{"l":"trading/trace/Main$.html","n":"resources","t":"def resources: Resource[IO, (Resource[IO, Server], Stream[IO, Alert], Stream[IO, TradeEvent], Stream[IO, TradeCommand], Stream[IO, AuthorEvent], Stream[IO, ForecastEvent], Stream[IO, ForecastCommand], ForecastingTracer[IO], TradingTracer[IO])]","d":"trading/trace/Main$","k":"def"},
{"l":"trading/trace/Main$.html","n":"run","t":"def run: IO[Unit]","d":"trading/trace/Main$","k":"def"},
{"l":"trading/trace/Main$.html","n":"sub","t":"val sub: Subscription","d":"trading/trace/Main$","k":"val"},
{"l":"trading/trace/TracingConfig.html","n":"TracingConfig","t":"class TracingConfig(httpPort: Port, pulsar: Config, honeycombApiKey: HoneycombApiKey)","d":"trading/trace/TracingConfig","k":"class"},
{"l":"trading/trace/fsm.html","n":"trading.trace.fsm","t":"package trading.trace.fsm","d":"trading/trace/fsm","k":"package"},
{"l":"trading/trace/fsm.html","n":"CmdKernel","t":"type CmdKernel = Kernel","d":"trading/trace/fsm","k":"type"},
{"l":"trading/trace/fsm.html","n":"EvtKernel","t":"type EvtKernel = Kernel","d":"trading/trace/fsm","k":"type"},
{"l":"trading/trace/fsm.html","n":"ForecastIn","t":"type ForecastIn = AuthorEvent | ForecastEvent | ForecastCommand","d":"trading/trace/fsm","k":"type"},
{"l":"trading/trace/fsm.html","n":"ForecastState","t":"type ForecastState = (List[AuthorEvent], List[ForecastEvent], List[ForecastCommand])","d":"trading/trace/fsm","k":"type"},
{"l":"trading/trace/fsm.html","n":"MatchingIds","t":"type MatchingIds = Map[CorrelationId, (Timestamp, Option[CmdKernel], Option[EvtKernel])]","d":"trading/trace/fsm","k":"type"},
{"l":"trading/trace/fsm.html","n":"MatchingIdsExpiration","t":"val MatchingIdsExpiration: FiniteDuration","d":"trading/trace/fsm","k":"val"},
{"l":"trading/trace/fsm.html","n":"Tick","t":"type Tick = Unit","d":"trading/trace/fsm","k":"type"},
{"l":"trading/trace/fsm.html","n":"TradeIn","t":"type TradeIn = TradeCommand | TradeEvent | Alert | Tick","d":"trading/trace/fsm","k":"type"},
{"l":"trading/trace/fsm.html","n":"TradeState","t":"type TradeState = (List[TradeEvent], List[Alert], MatchingIds)","d":"trading/trace/fsm","k":"type"},
{"l":"trading/trace/fsm.html","n":"expireMatchingIds","t":"def expireMatchingIds[F[_]](ids: MatchingIds)(using evidence$6: Monad[F], evidence$7: Time[F]): F[MatchingIds]","d":"trading/trace/fsm","k":"def"},
{"l":"trading/trace/fsm.html","n":"forecastFsm","t":"def forecastFsm[F[_]](tracer: ForecastingTracer[F])(using evidence$1: Applicative[F], evidence$2: Logger[F]): FSM[F, ForecastState, ForecastIn, Unit]","d":"trading/trace/fsm","k":"def"},
{"l":"trading/trace/fsm.html","n":"tradingFsm","t":"def tradingFsm[F[_]](tracer: TradingTracer[F])(using evidence$1: Logger[F], evidence$2: Monad[F], evidence$3: Time[F]): FSM[F, TradeState, TradeIn, Unit]","d":"trading/trace/fsm","k":"def"},
{"l":"trading/trace/fsm.html","n":"updateMatchingIds","t":"def updateMatchingIds[F[_]](ids: MatchingIds, cid: CorrelationId, kernel: Either[CmdKernel, EvtKernel])(using evidence$4: Monad[F], evidence$5: Time[F]): F[MatchingIds]","d":"trading/trace/fsm","k":"def"},
{"l":"trading/trace/fsm/ForecastState$.html","n":"ForecastState","t":"object ForecastState","d":"trading/trace/fsm/ForecastState$","k":"object"},
{"l":"trading/trace/fsm/ForecastState$.html","n":"empty","t":"def empty: ForecastState","d":"trading/trace/fsm/ForecastState$","k":"def"},
{"l":"trading/trace/fsm/TradeState$.html","n":"TradeState","t":"object TradeState","d":"trading/trace/fsm/TradeState$","k":"object"},
{"l":"trading/trace/fsm/TradeState$.html","n":"empty","t":"def empty: TradeState","d":"trading/trace/fsm/TradeState$","k":"def"},
{"l":"trading/trace/tracer.html","n":"trading.trace.tracer","t":"package trading.trace.tracer","d":"trading/trace/tracer","k":"package"},
{"l":"trading/trace/tracer/ForecastingTracer.html","n":"ForecastingTracer","t":"trait ForecastingTracer[F[_]]","d":"trading/trace/tracer/ForecastingTracer","k":"trait"},
{"l":"trading/trace/tracer/ForecastingTracer.html","n":"trace","t":"def trace(cmd: ForecastCommand, evt: Either[AuthorEvent, ForecastEvent]): F[Unit]","d":"trading/trace/tracer/ForecastingTracer","k":"def"},
{"l":"trading/trace/tracer/ForecastingTracer$.html","n":"ForecastingTracer","t":"object ForecastingTracer","d":"trading/trace/tracer/ForecastingTracer$","k":"object"},
{"l":"trading/trace/tracer/ForecastingTracer$.html","n":"make","t":"def make[F[_]](ep: EntryPoint[F])(using evidence$1: MonadCancelThrow[F], evidence$2: Sync[F]): ForecastingTracer[F]","d":"trading/trace/tracer/ForecastingTracer$","k":"def"},
{"l":"trading/trace/tracer/Honeycomb$.html","n":"Honeycomb","t":"object Honeycomb","d":"trading/trace/tracer/Honeycomb$","k":"object"},
{"l":"trading/trace/tracer/Honeycomb$.html","n":"makeEntryPoint","t":"def makeEntryPoint(key: HoneycombApiKey, dataset: String): Resource[IO, EntryPoint[IO]]","d":"trading/trace/tracer/Honeycomb$","k":"def"},
{"l":"trading/trace/tracer/TradingTracer.html","n":"TradingTracer","t":"trait TradingTracer[F[_]]","d":"trading/trace/tracer/TradingTracer","k":"trait"},
{"l":"trading/trace/tracer/TradingTracer.html","n":"alert","t":"def alert(kernel: Kernel, alt: Alert): F[Unit]","d":"trading/trace/tracer/TradingTracer","k":"def"},
{"l":"trading/trace/tracer/TradingTracer.html","n":"command","t":"def command(cmd: TradeCommand): F[Kernel]","d":"trading/trace/tracer/TradingTracer","k":"def"},
{"l":"trading/trace/tracer/TradingTracer.html","n":"event","t":"def event(kernel: Kernel, evt: TradeEvent): F[Kernel]","d":"trading/trace/tracer/TradingTracer","k":"def"},
{"l":"trading/trace/tracer/TradingTracer$.html","n":"TradingTracer","t":"object TradingTracer","d":"trading/trace/tracer/TradingTracer$","k":"object"},
{"l":"trading/trace/tracer/TradingTracer$.html","n":"make","t":"def make[F[_]](ep: EntryPoint[F])(using evidence$1: MonadCancelThrow[F]): TradingTracer[F]","d":"trading/trace/tracer/TradingTracer$","k":"def"},
{"l":"docs/index.html","n":"tracing","t":"tracing","d":"","k":"static"}];