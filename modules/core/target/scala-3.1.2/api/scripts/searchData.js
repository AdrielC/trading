pages = [{"l":"index.html","n":"core","t":"core","d":"","k":"static"},
{"l":"trading/core.html","n":"trading.core","t":"package trading.core","d":"trading/core","k":"package"},
{"l":"trading/core/AppTopic.html","n":"AppTopic","t":"class AppTopic","d":"trading/core/AppTopic","k":"class"},
{"l":"trading/core/AppTopic.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic","k":"def"},
{"l":"trading/core/AppTopic.html","n":"name","t":"def name: String","d":"trading/core/AppTopic","k":"def"},
{"l":"trading/core/AppTopic$.html","n":"AppTopic","t":"object AppTopic","d":"trading/core/AppTopic$","k":"object"},
{"l":"trading/core/AppTopic$$Alerts$.html","n":"Alerts","t":"object Alerts extends AppTopic","d":"trading/core/AppTopic$$Alerts$","k":"object"},
{"l":"trading/core/AppTopic$$Alerts$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$Alerts$","k":"def"},
{"l":"trading/core/AppTopic$$Alerts$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$Alerts$","k":"val"},
{"l":"trading/core/AppTopic$$AuthorEvents$.html","n":"AuthorEvents","t":"object AuthorEvents extends AppTopic","d":"trading/core/AppTopic$$AuthorEvents$","k":"object"},
{"l":"trading/core/AppTopic$$AuthorEvents$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$AuthorEvents$","k":"def"},
{"l":"trading/core/AppTopic$$AuthorEvents$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$AuthorEvents$","k":"val"},
{"l":"trading/core/AppTopic$$ForecastCommands$.html","n":"ForecastCommands","t":"object ForecastCommands extends AppTopic","d":"trading/core/AppTopic$$ForecastCommands$","k":"object"},
{"l":"trading/core/AppTopic$$ForecastCommands$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$ForecastCommands$","k":"def"},
{"l":"trading/core/AppTopic$$ForecastCommands$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$ForecastCommands$","k":"val"},
{"l":"trading/core/AppTopic$$ForecastEvents$.html","n":"ForecastEvents","t":"object ForecastEvents extends AppTopic","d":"trading/core/AppTopic$$ForecastEvents$","k":"object"},
{"l":"trading/core/AppTopic$$ForecastEvents$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$ForecastEvents$","k":"def"},
{"l":"trading/core/AppTopic$$ForecastEvents$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$ForecastEvents$","k":"val"},
{"l":"trading/core/AppTopic$$PriceUpdates$.html","n":"PriceUpdates","t":"object PriceUpdates extends AppTopic","d":"trading/core/AppTopic$$PriceUpdates$","k":"object"},
{"l":"trading/core/AppTopic$$PriceUpdates$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$PriceUpdates$","k":"def"},
{"l":"trading/core/AppTopic$$PriceUpdates$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$PriceUpdates$","k":"val"},
{"l":"trading/core/AppTopic$$SwitchCommands$.html","n":"SwitchCommands","t":"object SwitchCommands extends AppTopic","d":"trading/core/AppTopic$$SwitchCommands$","k":"object"},
{"l":"trading/core/AppTopic$$SwitchCommands$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$SwitchCommands$","k":"def"},
{"l":"trading/core/AppTopic$$SwitchCommands$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$SwitchCommands$","k":"val"},
{"l":"trading/core/AppTopic$$SwitchEvents$.html","n":"SwitchEvents","t":"object SwitchEvents extends AppTopic","d":"trading/core/AppTopic$$SwitchEvents$","k":"object"},
{"l":"trading/core/AppTopic$$SwitchEvents$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$SwitchEvents$","k":"def"},
{"l":"trading/core/AppTopic$$SwitchEvents$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$SwitchEvents$","k":"val"},
{"l":"trading/core/AppTopic$$TradingCommands$.html","n":"TradingCommands","t":"object TradingCommands extends AppTopic","d":"trading/core/AppTopic$$TradingCommands$","k":"object"},
{"l":"trading/core/AppTopic$$TradingCommands$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$TradingCommands$","k":"def"},
{"l":"trading/core/AppTopic$$TradingCommands$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$TradingCommands$","k":"val"},
{"l":"trading/core/AppTopic$$TradingEvents$.html","n":"TradingEvents","t":"object TradingEvents extends AppTopic","d":"trading/core/AppTopic$$TradingEvents$","k":"object"},
{"l":"trading/core/AppTopic$$TradingEvents$.html","n":"make","t":"def make(cfg: Config): Single","d":"trading/core/AppTopic$$TradingEvents$","k":"def"},
{"l":"trading/core/AppTopic$$TradingEvents$.html","n":"name","t":"val name: String","d":"trading/core/AppTopic$$TradingEvents$","k":"val"},
{"l":"trading/core/Conflicts$.html","n":"Conflicts","t":"object Conflicts","d":"trading/core/Conflicts$","k":"object"},
{"l":"trading/core/Conflicts$.html","n":"dedup","t":"def dedup(st: DedupState)(command: TradeCommand): Option[TradeCommand]","d":"trading/core/Conflicts$","k":"def"},
{"l":"trading/core/Conflicts$.html","n":"update","t":"def update(ds: DedupState)(command: TradeCommand, ts: Timestamp): DedupState","d":"trading/core/Conflicts$","k":"def"},
{"l":"trading/core/Conflicts$.html","n":"updateMany","t":"def updateMany(ds: DedupState)(commands: List[TradeCommand], ts: Timestamp): DedupState","d":"trading/core/Conflicts$","k":"def"},
{"l":"trading/core/TradeEngine$.html","n":"TradeEngine","t":"object TradeEngine","d":"trading/core/TradeEngine$","k":"object"},
{"l":"trading/core/TradeEngine$.html","n":"eventsFsm","t":"val eventsFsm: FSM[[A] =>> A, TradeState, TradeEvent | SwitchEvent, Unit]","d":"trading/core/TradeEngine$","k":"val"},
{"l":"trading/core/TradeEngine$.html","n":"fsm","t":"val fsm: FSM[[A] =>> A, TradeState, TradeCommand | SwitchCommand, (EventId, Timestamp) => TradeEvent | SwitchEvent]","d":"trading/core/TradeEngine$","k":"val"},
{"l":"trading/core/dedup.html","n":"trading.core.dedup","t":"package trading.core.dedup","d":"trading/core/dedup","k":"package"},
{"l":"trading/core/dedup/DedupRegistry.html","n":"DedupRegistry","t":"trait DedupRegistry[F[_]]","d":"trading/core/dedup/DedupRegistry","k":"trait"},
{"l":"trading/core/dedup/DedupRegistry.html","n":"get","t":"def get: F[DedupState]","d":"trading/core/dedup/DedupRegistry","k":"def"},
{"l":"trading/core/dedup/DedupRegistry.html","n":"save","t":"def save(state: DedupState): F[Unit]","d":"trading/core/dedup/DedupRegistry","k":"def"},
{"l":"trading/core/dedup/DedupRegistry$.html","n":"DedupRegistry","t":"object DedupRegistry","d":"trading/core/dedup/DedupRegistry$","k":"object"},
{"l":"trading/core/dedup/DedupRegistry$.html","n":"from","t":"def from[F[_]](redis: RedisCommands[F, String, String], appId: AppId, exp: KeyExpiration)(using evidence$1: MonadThrow[F], evidence$2: Time[F]): DedupRegistry[F]","d":"trading/core/dedup/DedupRegistry$","k":"def"},
{"l":"trading/core/dedup/DedupRegistry$.html","n":"fromClient","t":"def fromClient[F[_]](client: RedisClient, appId: AppId, exp: KeyExpiration)(using evidence$3: MkRedis[F], evidence$4: MonadThrow[F], evidence$5: Time[F]): Resource[F, DedupRegistry[F]]","d":"trading/core/dedup/DedupRegistry$","k":"def"},
{"l":"trading/core/dedup/DedupRegistry$.html","n":"make","t":"def make[F[_]](uri: RedisURI, appId: AppId, exp: KeyExpiration)(using evidence$6: Async[F], evidence$7: Log[F], evidence$8: MonadThrow[F], evidence$9: Time[F]): Resource[F, DedupRegistry[F]]","d":"trading/core/dedup/DedupRegistry$","k":"def"},
{"l":"trading/core/http.html","n":"trading.core.http","t":"package trading.core.http","d":"trading/core/http","k":"package"},
{"l":"trading/core/http/Ember$.html","n":"Ember","t":"object Ember","d":"trading/core/http/Ember$","k":"object"},
{"l":"trading/core/http/Ember$.html","n":"default","t":"def default[F[_]](port: Port)(using evidence$8: Async[F], evidence$9: Console[F]): Resource[F, Server]","d":"trading/core/http/Ember$","k":"def"},
{"l":"trading/core/http/Ember$.html","n":"routes","t":"def routes[F[_]](port: Port, routes: HttpRoutes[F])(using evidence$6: Async[F], evidence$7: Console[F]): Resource[F, Server]","d":"trading/core/http/Ember$","k":"def"},
{"l":"trading/core/http/Ember$.html","n":"websocket","t":"def websocket[F[_]](port: Port, f: WebSocketBuilder[F] => HttpRoutes[F])(using evidence$4: Async[F], evidence$5: Console[F]): Resource[F, Server]","d":"trading/core/http/Ember$","k":"def"},
{"l":"trading/core/http/HealthRoutes.html","n":"HealthRoutes","t":"class HealthRoutes[F[_]] extends Http4sDsl[F]","d":"trading/core/http/HealthRoutes","k":"class"},
{"l":"trading/core/http/HealthRoutes.html","n":"routes","t":"val routes: HttpRoutes[F]","d":"trading/core/http/HealthRoutes","k":"val"},
{"l":"trading/core/snapshots.html","n":"trading.core.snapshots","t":"package trading.core.snapshots","d":"trading/core/snapshots","k":"package"},
{"l":"trading/core/snapshots/SnapshotReader.html","n":"SnapshotReader","t":"trait SnapshotReader[F[_]]","d":"trading/core/snapshots/SnapshotReader","k":"trait"},
{"l":"trading/core/snapshots/SnapshotReader.html","n":"latest","t":"def latest: F[Option[(TradeState, MsgId)]]","d":"trading/core/snapshots/SnapshotReader","k":"def"},
{"l":"trading/core/snapshots/SnapshotReader$.html","n":"SnapshotReader","t":"object SnapshotReader","d":"trading/core/snapshots/SnapshotReader$","k":"object"},
{"l":"trading/core/snapshots/SnapshotReader$.html","n":"from","t":"def from[F[_]](redis: RedisCommands[F, String, String])(using evidence$1: MonadThrow[F]): SnapshotReader[F]","d":"trading/core/snapshots/SnapshotReader$","k":"def"},
{"l":"trading/core/snapshots/SnapshotReader$.html","n":"fromClient","t":"def fromClient[F[_]](client: RedisClient)(using evidence$2: MkRedis[F], evidence$3: MonadThrow[F]): Resource[F, SnapshotReader[F]]","d":"trading/core/snapshots/SnapshotReader$","k":"def"},
{"l":"trading/core/snapshots/SnapshotReader$.html","n":"make","t":"def make[F[_]](uri: RedisURI)(using evidence$4: Async[F], evidence$5: Log[F], evidence$6: MonadThrow[F]): Resource[F, SnapshotReader[F]]","d":"trading/core/snapshots/SnapshotReader$","k":"def"},
{"l":"trading/core/snapshots/SnapshotWriter.html","n":"SnapshotWriter","t":"trait SnapshotWriter[F[_]]","d":"trading/core/snapshots/SnapshotWriter","k":"trait"},
{"l":"trading/core/snapshots/SnapshotWriter.html","n":"save","t":"def save(state: TradeState, id: MsgId): F[Unit]","d":"trading/core/snapshots/SnapshotWriter","k":"def"},
{"l":"trading/core/snapshots/SnapshotWriter.html","n":"saveStatus","t":"def saveStatus(st: TradingStatus): F[Unit]","d":"trading/core/snapshots/SnapshotWriter","k":"def"},
{"l":"trading/core/snapshots/SnapshotWriter$.html","n":"SnapshotWriter","t":"object SnapshotWriter","d":"trading/core/snapshots/SnapshotWriter$","k":"object"},
{"l":"trading/core/snapshots/SnapshotWriter$.html","n":"from","t":"def from[F[_]](redis: RedisCommands[F, String, String], exp: KeyExpiration)(using evidence$1: Async[F], evidence$2: Log[F]): SnapshotWriter[F]","d":"trading/core/snapshots/SnapshotWriter$","k":"def"},
{"l":"trading/core/snapshots/SnapshotWriter$.html","n":"fromClient","t":"def fromClient[F[_]](client: RedisClient, exp: KeyExpiration)(using evidence$3: Async[F], evidence$4: Log[F]): Resource[F, SnapshotWriter[F]]","d":"trading/core/snapshots/SnapshotWriter$","k":"def"},
{"l":"trading/core/snapshots/SnapshotWriter$.html","n":"make","t":"def make[F[_]](uri: RedisURI, exp: KeyExpiration)(using evidence$5: Async[F], evidence$6: Log[F]): Resource[F, SnapshotWriter[F]]","d":"trading/core/snapshots/SnapshotWriter$","k":"def"},
{"l":"docs/index.html","n":"core","t":"core","d":"","k":"static"}];